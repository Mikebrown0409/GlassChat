import { db } from "~/lib/db";
import type { MemoryEntry, SmartSummary } from "~/types/memory";

class MemoryManagerClient {
  async addMemory(
    chatId: string,
    content: string,
    metadata: Record<string, unknown> = {},
  ): Promise<number> {
    const entry: MemoryEntry = {
      chatId,
      content,
      embedding: [], // Embeddings will be generated by the server
      timestamp: Date.now(),
      metadata,
    };
    return db.memoryEntries.add(entry);
  }

  async getMemories(chatId: string): Promise<MemoryEntry[]> {
    return db.memoryEntries.where({ chatId }).toArray();
  }

  async getSummary(chatId: string): Promise<SmartSummary | undefined> {
    return db.smartSummaries.get({ chatId });
  }

  async updateSummary(
    chatId: string,
    summary: string,
    keywords: string[],
  ): Promise<number> {
    const smartSummary: SmartSummary = {
      chatId,
      summary,
      keywords,
      createdAt: Date.now(),
    };
    return db.smartSummaries.put(smartSummary);
  }
}

export const memoryManagerClient = new MemoryManagerClient();
 